% CBRS Spectrogram Generator for 12 Classes (Based on Table I)
clear; clc;

% -----------------------------
% Global Parameters
% -----------------------------
fs = 20e6;
T = 250e-6;
N = round(fs * T);
t = (0:N-1)/fs;

% Spectrogram config
window = hamming(200);
noverlap = 124;
nfft = 256;

% -----------------------------
% Helper: Radar Chirp Generator
% -----------------------------
function sig = generateRadar(t)
    f0 = 3.55e9; bw = 10e6;
    i = chirp(t, f0 - bw/2, t(end), f0 + bw/2);
    q = chirp(t, f0 - bw/2, t(end), f0 + bw/2, 'linear', 90);
    sig = i + 1i*q;
end

% -----------------------------
% Helper: PAL (Burst OFDM) Generator
% -----------------------------
function sig = generatePAL(t)
    M = 16; Nsub = 32;
    numSymbols = floor(length(t)/Nsub);
    dataBits = randi([0 M-1], Nsub, numSymbols);
    qamSymbols = qammod(dataBits, M, 'UnitAveragePower', true);
    sigMatrix = ifft(qamSymbols, Nsub);

    % Burst
    burstIdx = round(numSymbols / 2);
    burstFreqIdx = round(Nsub / 2);
    burstPower = 100;
    burstWidth = 5;
    sigMatrix(burstFreqIdx, burstIdx:burstIdx+burstWidth) = ...
        burstPower * log2(burstPower) * abs(burstPower);

    % Tone
    toneFreqIdx = round(Nsub / 4);
    sigMatrix(toneFreqIdx, :) = 5;

    % Add noise
    sigMatrix = sigMatrix + 0.1 * randn(size(sigMatrix));
    sig = reshape(ifft(sigMatrix, Nsub), 1, []);
    sig = sig(1:min(length(t), length(sig)));
    sig(end+1:length(t)) = 0;
    sig = sig(:);
end

% -----------------------------
% Scenario Definitions from Table I
% -----------------------------
classes = {
    "Empty",     "Empty";
    "Radar",     "Empty";
    "Empty",     "Radar";
    "Radar",     "Radar";
    "LTE",       "Empty";
    "Empty",     "LTE";
    "LTE",       "Radar";
    "Radar",     "LTE";
    "Collision", "Empty";
    "Empty",     "Collision";
    "Collision", "Radar";
    "Radar",     "Collision"
};

% -----------------------------
% Signal Generator Based on Label
% -----------------------------
function iq = getSignal(label, t)
    switch label
        case "Empty"
            iq = zeros(size(t(:)));
        case "Radar"
            iq = generateRadar(t);
        case "LTE"
            iq = generatePAL(t);
        case "Collision"
            iq = generateRadar(t) + generatePAL(t);
        otherwise
            iq = zeros(size(t(:)));
    end
end

% -----------------------------
% Generate All Spectrograms
% -----------------------------
outputFolder = 'spectrograms';
mkdir(outputFolder);

for i = 1:12
    label1 = classes{i,1};
    label2 = classes{i,2};

    ch1 = getSignal(label1, t);
    ch2 = getSignal(label2, t);
    combined = ch1 + ch2;

    % Plot Spectrogram
    figure('Visible', 'off');
    combined = combined(:); % Force column vector
    spectrogram(combined, window, noverlap, nfft, fs, 'yaxis');
    title(['Class ' num2str(i) ': CH1=' label1 ', CH2=' label2]);
    colormap gray; colorbar;
    xlabel('Time'); ylabel('Frequency (MHz)');

    % Save figure
    saveas(gcf, fullfile(outputFolder, sprintf('class_%02d.png', i)));
    close;
end

disp('âœ… All 12 spectrograms generated in "spectrograms" folder.');
